// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract P2PTransaction {

    mapping(address => uint256) public balances;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Deposit(address indexed account, uint256 amount);

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }

    function deposit(uint256 value) public payable {
        assert(value > 100);
        balances[msg.sender] += value;
        emit Deposit(msg.sender, value);
    }

    function transfer(address to, uint256 value) public {
        require(balances[msg.sender] >= value, "Insufficient balance");
        
        // Check if the transfer is successful, otherwise revert
        bool success = _transfer(msg.sender, to, value);
        if (!success) {
            revert("Transfer failed");
        }
        emit Transfer(msg.sender, to, value);
    }


    function _transfer(address from, address to, uint256 value) internal returns (bool) {
        // Ensure positive value to transfer
        if (value <= 0) {
            revert("Invalid transfer value");
        }

        // Update balances
        balances[from] -= value;
        balances[to] += value;

        // Assert that the balances are consistent after the transfer
        if (balances[from] + balances[to] != balances[from] - value + balances[to] + value) {
            revert("Balance inconsistency after transfer");
        }

        return true;
    }

}
